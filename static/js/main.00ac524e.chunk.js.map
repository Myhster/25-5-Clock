{"version":3,"sources":["Clock/Clock.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","useState","breakLength","setBreakLength","sessionLength","setSessionLength","timeLeft","setTimeLeft","sessionOn","setSessionOn","intervalId","setIntervalId","minutes","Math","floor","seconds","audioBeep","document","getElementById","play","dotArray","i","push","dots","map","item","index","elements","length","radius","angle","PI","style","position","right","sin","top","cos","className","grayStyle","filter","transition","transitionTimingFunction","id","onClick","clearInterval","newIntervalId","setInterval","prevCount","pause","currentTime","src","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kQAqMeA,MAlMf,WACE,MAAsCC,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAgCJ,mBAAS,MAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAoCR,mBAAS,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KAwCMC,EAAO,UACXC,KAAKC,MAAMR,EAAW,IAAM,GACxB,IAAMO,KAAKC,MAAMR,EAAW,IAC5BO,KAAKC,MAAMR,EAAW,KAEtBS,EAAO,UACXT,EAAW,GAAK,GAAK,IAAOA,EAAW,GAAMA,EAAW,KAGxC,IAAdE,EACc,QAAZI,GAAiC,QAAZG,IACvBR,EAA0B,GAAdL,GACZO,GAAa,IAGC,QAAZG,GAAiC,QAAZG,IACvBR,EAA4B,GAAhBH,GACZK,GAAa,IAIjB,IAaMO,EAAYC,SAASC,eAAe,QAC1B,QAAZN,GAAiC,QAAZG,GACvBC,EAAUG,OAIZ,IAAIC,EAAW,GACf,IAAkB,IAAdZ,EACF,IAAK,IAAIa,EAAI,EAAGA,EAAIjB,EAAeiB,IACjCD,EAASE,KAAKD,QAGhB,IAAK,IAAIA,EAAI,EAAGA,EAAInB,EAAamB,IAC/BD,EAASE,KAAKD,GAIlB,IAAME,EAAOH,EAASI,KAAI,SAACC,EAAMC,GAC/B,IAAIC,EAAWP,EAASQ,OACpBC,EAAS,IAETC,EAAU,EAAIjB,KAAKkB,GAAMJ,EAAYF,EAErCO,EAAQ,CACVC,SAAU,WAEVC,MAAOL,EAASA,EAAShB,KAAKsB,IAAIL,GANhB,EAOlBM,IAAKP,EAASA,EAAShB,KAAKwB,IAAIP,GAPd,GAUpB,OACE,qBAEEE,MAAOA,EACPM,UAAWZ,IAAUb,KAAKC,MAAMR,EAAW,IAAM,YAAc,OAF1DoB,MAYPa,EAAY,GAShB,OANEA,EADiB,IAAf7B,EAPO,CACT8B,OAAQ,iBACRC,WAAY,KACZC,yBAA0B,YAOd,CAAED,WAAY,KAAMC,yBAA0B,YAK1D,sBAAKJ,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,sBAAKA,UAAU,UAAUN,MAAOO,EAAhC,UACGhB,EACD,sBAAKoB,GAAG,YAAR,UACG/B,EADH,IACaG,UAIjB,sBAAKuB,UAAU,kBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,qBACEK,GAAG,kBACHL,UAAU,qBACVM,QAtIa,WACjB1C,EAAc,IAAIC,EAAeD,EAAc,GACnDK,EAA0B,GAAdL,EAAmB,OAsIzB,qBAAKyC,GAAG,cAAR,0BACA,qBAAKA,GAAG,eAAR,SAAwBzC,IACxB,qBACEyC,GAAG,kBACHL,UAAU,qBACVM,QAnJa,WACjB1C,EAAc,IAChBC,EAAeD,EAAc,GAC7BK,EAA0B,GAAdL,EAAmB,WAoJ7B,sBAAKoC,UAAU,aAAf,UACE,qBAAKK,GAAG,aAAaC,QA7FX,WAChB,GAAIlC,EAGF,OAFAmC,cAAcnC,QACdC,EAAc,GAIhB,IAAMmC,EAAgBC,aAAY,WAChCxC,GAAY,SAACyC,GAAD,OAAeA,EAAY,OACtC,KACHrC,EAAcmC,IAmFR,SACGpC,EACC,qBAAK4B,UAAU,mBAEf,qBAAKA,UAAU,sBAGnB,qBAAKK,GAAG,cAAR,SAAuBnC,EAAY,UAAY,UAC/C,qBAAKmC,GAAG,QAAQL,UAAU,kBAAkBM,QA3ItC,WAUZ,GATAzC,EAAe,GACfE,EAAiB,IACjBE,EAAY,MACZE,GAAa,GACI,MAAbO,IACFA,EAAUiC,QACVjC,EAAUkC,YAAc,GAGtBxC,EAGF,OAFAmC,cAAcnC,QACdC,EAAc,SAkIZ,sBAAK2B,UAAU,iBAAf,UACE,qBACEK,GAAG,oBACHL,UAAU,qBACVM,QAvJe,WACnBxC,EAAgB,IAAIC,EAAiBD,EAAgB,GACzDG,EAA4B,GAAhBH,EAAqB,OAuJ3B,qBAAKuC,GAAG,gBAAR,4BACA,qBAAKA,GAAG,iBAAR,SAA0BvC,IAC1B,qBACEuC,GAAG,oBACHL,UAAU,qBACVM,QApKe,WACnBxC,EAAgB,IAClBC,EAAiBD,EAAgB,GACjCG,EAA4B,GAAhBH,EAAqB,cAsKjC,uBACEuC,GAAG,OACHQ,IAAI,kHCpLGC,MARf,WACE,OACE,qBAAKd,UAAU,MAAf,SACE,cAAC,EAAD,OCMSe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/C,SAASC,eAAe,SAM1BmC,M","file":"static/js/main.00ac524e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Clock.scss';\r\n\r\nfunction Clock() {\r\n  const [breakLength, setBreakLength] = useState(5);\r\n  const [sessionLength, setSessionLength] = useState(25);\r\n  const [timeLeft, setTimeLeft] = useState(1500);\r\n  const [sessionOn, setSessionOn] = useState(true);\r\n  const [intervalId, setIntervalId] = useState(0);\r\n\r\n  const breakDecrement = () => {\r\n    if (breakLength > 1) {\r\n      setBreakLength(breakLength - 1);\r\n      setTimeLeft(breakLength * 60 - 60);\r\n    }\r\n  };\r\n  const breakIncrement = () => {\r\n    if (breakLength < 60) setBreakLength(breakLength + 1);\r\n    setTimeLeft(breakLength * 60 + 60);\r\n  };\r\n  const sessionDecrement = () => {\r\n    if (sessionLength > 1) {\r\n      setSessionLength(sessionLength - 1);\r\n      setTimeLeft(sessionLength * 60 - 60);\r\n    }\r\n  };\r\n  const sessionIncrement = () => {\r\n    if (sessionLength < 60) setSessionLength(sessionLength + 1);\r\n    setTimeLeft(sessionLength * 60 + 60);\r\n  };\r\n\r\n  const reset = () => {\r\n    setBreakLength(5);\r\n    setSessionLength(25);\r\n    setTimeLeft(1500);\r\n    setSessionOn(true);\r\n    if (audioBeep != null) {\r\n      audioBeep.pause();\r\n      audioBeep.currentTime = 0;\r\n    }\r\n\r\n    if (intervalId) {\r\n      clearInterval(intervalId);\r\n      setIntervalId(0);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const minutes = `${\r\n    Math.floor(timeLeft / 60) < 10\r\n      ? '0' + Math.floor(timeLeft / 60)\r\n      : Math.floor(timeLeft / 60)\r\n  }`;\r\n  const seconds = `${\r\n    timeLeft % 60 < 10 ? '0' + (timeLeft % 60) : timeLeft % 60\r\n  }`;\r\n\r\n  if (sessionOn === true) {\r\n    if (minutes === '0-1' && seconds === '0-1') {\r\n      setTimeLeft(breakLength * 60);\r\n      setSessionOn(false);\r\n    }\r\n  } else {\r\n    if (minutes === '0-1' && seconds === '0-1') {\r\n      setTimeLeft(sessionLength * 60);\r\n      setSessionOn(true);\r\n    }\r\n  }\r\n\r\n  const countdown = () => {\r\n    if (intervalId) {\r\n      clearInterval(intervalId);\r\n      setIntervalId(0);\r\n      return;\r\n    }\r\n\r\n    const newIntervalId = setInterval(() => {\r\n      setTimeLeft((prevCount) => prevCount - 1);\r\n    }, 1000);\r\n    setIntervalId(newIntervalId);\r\n  };\r\n\r\n  const audioBeep = document.getElementById('beep');\r\n  if (minutes === '0-1' && seconds === '0-1') {\r\n    audioBeep.play();\r\n  }\r\n  //-----------------------------------animation-------------------------\r\n\r\n  let dotArray = [];\r\n  if (sessionOn === true) {\r\n    for (let i = 0; i < sessionLength; i++) {\r\n      dotArray.push(i);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < breakLength; i++) {\r\n      dotArray.push(i);\r\n    }\r\n  }\r\n\r\n  const dots = dotArray.map((item, index) => {\r\n    let elements = dotArray.length;\r\n    let radius = 150;\r\n    let elementRadius = 5;\r\n    let angle = ((2 * Math.PI) / elements) * item;\r\n\r\n    let style = {\r\n      position: 'absolute',\r\n      //display: 'block',\r\n      right: radius + radius * Math.sin(angle) - elementRadius,\r\n      top: radius - radius * Math.cos(angle) - elementRadius,\r\n    };\r\n\r\n    return (\r\n      <div\r\n        key={index}\r\n        style={style}\r\n        className={index === Math.floor(timeLeft / 60) ? 'dotBright' : 'dot'}\r\n      ></div>\r\n    );\r\n  });\r\n\r\n  let gray = {\r\n    filter: 'grayscale(80%)',\r\n    transition: '1s',\r\n    transitionTimingFunction: 'ease-out',\r\n  };\r\n  let grayStyle = {};\r\n\r\n  if (intervalId === 0) {\r\n    grayStyle = gray;\r\n  } else {\r\n    grayStyle = { transition: '1s', transitionTimingFunction: 'ease-out' };\r\n  }\r\n\r\n  //-------------------------------------------------------------------\r\n  return (\r\n    <div className='all'>\r\n      <div className='dotContainer'>\r\n        <div className='dotCont' style={grayStyle}>\r\n          {dots}\r\n          <div id='time-left'>\r\n            {minutes}:{seconds}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='controlElements'>\r\n        <div className='breakControl'>\r\n          <div\r\n            id='break-increment'\r\n            className='triButton increase'\r\n            onClick={breakIncrement}\r\n          ></div>\r\n          <div id='break-label'>Break Length</div>\r\n          <div id='break-length'>{breakLength}</div>\r\n          <div\r\n            id='break-decrement'\r\n            className='triButton decrease'\r\n            onClick={breakDecrement}\r\n          ></div>\r\n        </div>\r\n\r\n        <div className='startReset'>\r\n          <div id='start_stop' onClick={countdown}>\r\n            {intervalId ? (\r\n              <div className='triButton stop'></div>\r\n            ) : (\r\n              <div className='triButton start'></div>\r\n            )}\r\n          </div>\r\n          <div id='timer-label'>{sessionOn ? 'Session' : 'Break'}</div>\r\n          <div id='reset' className='triButton reset' onClick={reset}></div>\r\n        </div>\r\n\r\n        <div className='sessionControl'>\r\n          <div\r\n            id='session-increment'\r\n            className='triButton increase'\r\n            onClick={sessionIncrement}\r\n          ></div>\r\n          <div id='session-label'>Session Length</div>\r\n          <div id='session-length'>{sessionLength}</div>\r\n          <div\r\n            id='session-decrement'\r\n            className='triButton decrease'\r\n            onClick={sessionDecrement}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n\r\n      <audio\r\n        id='beep'\r\n        src='https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav'\r\n      ></audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Clock;\r\n","import './App.scss';\nimport Clock from './Clock/Clock';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Clock />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}